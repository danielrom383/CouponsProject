package com.danielrom.coupons.logic;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import com.danielrom.coupons.dao.CompanyDao;
import com.danielrom.coupons.dao.UserLoginDetailsDao;
import com.danielrom.coupons.entities.UserLoginDetailsEntity;
import com.danielrom.coupons.enums.ErrorType;
import com.danielrom.coupons.enums.UserType;
import com.danielrom.coupons.exceptions.ApplicationException;
import com.danielrom.coupons.utilities.InputValidationUtils;

@Controller
public class UserLoginDetailsController {


	@Autowired
	private UserLoginDetailsDao userLoginDetailsDao;
	@Autowired 
	private CompanyDao companyDao;

	// ------------------------------------Creates a user-------------------------------------

	public long createUserLoginDetails (UserLoginDetailsEntity userLoginDetails) throws ApplicationException {

		if (userLoginDetails.getUserType() == UserType.COMPANY) {
			if (userLoginDetails.getCompany() == null || companyDao.getCompany(userLoginDetails.getCompany().getCompanyName()) == null) {
				throw new ApplicationException (ErrorType.WORNG_INPUT, "A user of type 'COMPANY' must be linked to an existing company");
			}
		}

		if (!InputValidationUtils.isEmailValid(userLoginDetails.getEmail())) {
			throw new ApplicationException (ErrorType.WORNG_INPUT, "The email you inserted is invalid");
		}

		if (!InputValidationUtils.isPasswordValid(userLoginDetails.getPassword())) {
			throw new ApplicationException (ErrorType.WORNG_INPUT, "The password you inserted is invalid");
		}

		if (userLoginDetailsDao.getUserLoginDetails(userLoginDetails.getEmail()) != null) {
			throw new ApplicationException (ErrorType.EMAIL_ALREADY_EXISTS, ErrorType.EMAIL_ALREADY_EXISTS.getInternalMessage());
		}

		long autoGeneratedId = userLoginDetailsDao.createUserLoginDetails(userLoginDetails);

		return autoGeneratedId;
	}

	// ------------------------------------Removes a user---------------------------------

	public void removeUserLoginDetails (long id) throws ApplicationException {

		UserLoginDetailsEntity userLoginDetails = userLoginDetailsDao.getUserLoginDetails(id);

		if (userLoginDetails == null) {
			throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "The user you're trying to remove doesn't exist");
		}
		
		userLoginDetailsDao.removeUserLoginDetails(id);
	}

	// ------------------------------Update user login details---------------------------------

	public void updateUserLoginDetails (UserLoginDetailsEntity userLoginDetails) throws ApplicationException {

		if (getUserLoginDetails(userLoginDetails.getId()) == null) {
			throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "The user you're trying to update doesn't exist");
		}

		userLoginDetailsDao.updateUserLoginDetails(userLoginDetails);
	}


	// ------------------------------------Getters-------------------------------------

	public UserLoginDetailsEntity getUserLoginDetails(long id) throws ApplicationException {

		return userLoginDetailsDao.getUserLoginDetails(id);
	}

	public UserLoginDetailsEntity getUserLoginDetails(String email) throws ApplicationException {

		return userLoginDetailsDao.getUserLoginDetails(email);
	}

	// ------------------------------------Authenticate user-------------------------------------

	public boolean isUserLegitimate(String email, String password) throws ApplicationException {

		UserLoginDetailsEntity user = userLoginDetailsDao.getUserLoginDetails(email);

		if (user == null) {
			throw new ApplicationException (ErrorType.INVALID_USER, "The account you're trying to authenticate doesn't exist");
		}

		if (password.equals(user.getPassword())) {
			return true;
		}

		throw new ApplicationException (ErrorType.WORNG_INPUT, "The password you inserted doesn't match the account's password");
	}

}
